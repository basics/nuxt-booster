import{_ as e,a as t}from"./chunks/poster-light.Ct4_19D2.js";import{_ as o,c as r,o as i,W as a}from"./chunks/framework.BC2ldCWu.js";const _=JSON.parse('{"title":"Introduction","description":"","frontmatter":{"outline":"deep","title":"Introduction"},"headers":[],"relativePath":"v2/index.md","filePath":"v2/index.md"}'),n={name:"v2/index.md"},s=a('<img class="poster-dark" src="'+e+'" width="1280" height="640" alt="nuxt booster" title="nuxt booster"><img class="poster-light" src="'+t+'" width="1280" height="640" alt="nuxt booster" title="nuxt booster"><p><a href="https://www.npmjs.com/package/nuxt-booster" target="_blank" rel="noreferrer">Module</a> for <a href="https://nuxtjs.org" target="_blank" rel="noreferrer">NuxtJS</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You are reading Nuxt Booster v2 docs. <a href="/nuxt-booster/">For Nuxt 3 go to the v3 docs</a></p></div><p><strong>Nuxt Booster</strong> takes over the lighthouse performance optimization of your generated website.</p><p>In order to achieve a performance score of 100/100, only the necessary resources located in the current viewport may be initialized when the page is loaded. This includes images, fonts and the js-modules. Until now, there has been no practical and usable concept to help developers maintain an overview and enable accurate targeting in NuxtJS projects.</p><p>This module addresses this problem and provides a holistic approach to intelligently load the necessary viewport related resources to reduce FCP, DCL, TTI, TBT and CLS.</p><p>We didn&#39;t reinvent the whole wheel. We adapt the lazy hydration concept of <a href="https://github.com/maoberlehner/vue-lazy-hydration" target="_blank" rel="noreferrer">Markus Oberlehner</a> to load js components in an efficient way, use the <a href="https://github.com/nuxt/image" target="_blank" rel="noreferrer">nuxt/image</a> module as a base to retrieve optimized image resolutions for our picture and image components and add some new stuff to obtain a holistic solution.</p><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><ul><li>NodeJS &gt;= 12.x.x</li><li>NuxtJS &gt;= 2.15.0</li></ul><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><p>We provide the following CMS-friendly features:</p><ul><li>dynamic loading of viewport based page resources like fonts, components, pictures, images and iframes</li><li>optional blocking of javascript execution by initial performance measuring</li><li>optimized initial load of javascript files by eliminating of unnecessary javascript files</li><li>prevents the loading of unnecessary resources (including components) that are outside the current viewport.</li><li>optional info layer concept to inform users about a reduced UX when bandwidth or hardware is compromised.</li><li>completely new approach of font declaration</li><li>optimized picture component (supports viewport based sources e.g. landscape/portrait)</li><li>optimized image component</li><li>supports SEO-friendly lazy hydration mode (picture + image)</li><li>optimized youtube/vimeo component (auto generated poster image in different resolutions)</li></ul><h2 id="results" tabindex="-1">Results <a class="header-anchor" href="#results" aria-label="Permalink to &quot;Results&quot;">​</a></h2><ul><li>delivery of the minimum required resources based on the current viewport</li><li>if you use the tools as specified you will get a lighthouse performance score of 100/100</li></ul>',15),l=[s];function c(d,u,p,h,m,f){return i(),r("div",null,l)}const v=o(n,[["render",c]]);export{_ as __pageData,v as default};
